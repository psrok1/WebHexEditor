------------------------------------------
- HTML5 HexEditor                        -
- DRAFT 20160212                         -
-                                        -
- Paweł Srokosz (C) 2016                 -
------------------------------------------

Roadmap:

1. APLIKACJA BAZOWA
    a) Opracowanie asynchronicznego przetwarzania danych z pliku:
        * Skonstruowanie back-end'u bazującego na WebWorker
        * Opanowanie sekwencyjnego i indeksowego operowania na pliku
        * Przechowywanie tymczasowego stanu
        * Stos operacji
    b) Opracowanie podstawowego interfejsu użytkownika
2. ROZSZERZENIE O PODSTAWOWE OPERACJE
    a) Mechanizm zaznaczania
        * Zaznaczanie bloków [rozłączne, bazujące na zakresach]
        * Obsługa schowka (wytnij/kopiuj/wklej)
    b) Funkcjonalność wielu kart
3. KOLOROWANIE SKŁADNI
    a) Opracowanie systemu typów danych
        * Dwa rodzaje:
            - bajtowy (pozwala dekodować ciągi bajtów lub poszczególne bajty w ciągach)
            - bitowy (pozwala dokonać oznaczania na poziomie bitów)
        * Customowy decoder
        * Podstawowe zastosowania:
            ASCII Decoder
            Typy liczbowe
    b) Back-end dla kolorowania
        * Zapamiętywanie oznaczeń, system nazw i kolorów
    c) Front-end dla kolorowania
        [LUŹNY POMYSŁ: PROSTY OPIS POLA W KOLOROWYM FOOTERZE]
        [NA DOLE WIĘKSZY PANEL ZAWIERAJĄCY ZDEKODOWANĄ ZAWARTOŚĆ]
    d) Rozpoznawanie typu pliku
        * Interfejs pozwalający na rozpoznawanie pliku na podstawie konkretnych bajtów
        * Implementacja kilku prostych formatów pliku
4. SYSTEM SEKCJI
    a) Modyfikacja GUI: wspieranie dzielenia plików na sekcje
    b) Wprowadzenie możliwości ręcznego i automatycznego podziału plików
    c) Rozszerzenie modułu rozpoznającego typy plików
5. SYSTEM PLUGINÓW
    a) Możliwość wprowadzenia własnych typów i kolorowań poprzez podlinkowanie skryptu
       z URL lub dopisanie poprzez LocalStorage


--------------------------------------------------------------------
NOTATNIK:

SZYBKI POMYSŁ: KAŻDY KONTEKST DANYCH W ODDZIELNYM WEBWORKERZE

Struktura danych: lista sortowana
    ORIGIN_BLOCK 0.....35
    DATA_BLOCK 36...42    00,0F,0F,0F,0A,A4,A2
    ORIGIN_BLOCK 43...100
    ORIGIN_BLOCK 101..222

insertBytes     [wstawienie]
overwriteBytes  [nadpisanie]
removeBytes     [usunięcie]

readBytes       [odczyt]


ORIGIN_BLOCK 0.....55
ORIGIN_BLOCK 61.....255


USUNIĘCIE OBSZARU   [ ]
WSTAWIENIE OBSZARU  [need to split]

Algorytm usuwania obszaru:
    Znajdź pierwszy zawierający początek lub będący tuż za tym początkiem
    Znajdź ostatni zawierający koniec lub będący tuż przed tym końcem
    Wykonaj usuwanie na każdym
    Przesuń offsety dla każdego następującego po lewym skrajnym
    Spróbuj połączyć skrajne w spójny obszar

Algorytm wstawiania obszaru:
    Znajdź blok, w który "celuje" początek obszaru
    Jeśli taki istnieje: podziel go na dwie części
    Wstaw w miejsce podziału nasz blok
    Spróbuj zescalać go z poprzednikiem i następnikiem

v
01234567
|01234567
       v
01234567
0123456|7

------------------------------------------
- HTML5 HexEditor                        -
- DRAFT 20160731                         -
-                                        -
- Paweł Srokosz (C) 2016                 -
------------------------------------------

Interfejs użytkownika - istotne elementy:
    * Edytor:
        Komponent edytora musi być możliwie maksymalnie niezależny od całej aplikacji (przede wszystkim w sensie layoutu)
        Będzie renderowany na swoim wydzielonym scroll-boxie.
        Komponent ma wiedzę o dostępnym viewporcie, ale musi możliwie dobrze radzić sobie ze
        zmianami położenia i rozmiaru

    * Mechanizm kart
        Karty pozwalają na przełączanie aktualnie renderowanego edytora.
        Umożliwia to pracę z wieloma dokumentami naraz.
        Menedżer edytorów można potem rozszerzyć o np. splitting

    Na początku spróbujemy zrobić pojedynczy edytor.
    Komunikacja edytora ze światem:
        * Element na którym będzie się renderował
        * Brama danych, którą będzie odpytywał o żądany content

        Elementy muszą zapewniać odpowiednią interaktywność.
        Prawdopodobnie będzie to wymagało współpracy z jakimś obiektem na wyższym poziomie
        np. w przypadku przechwytywania klawiatury.
        (nie wiem jak to wygląda w HTML5 z focusem)
        (w sumie wystarczy podczepianie handlera)

Podstawowe akcje:
    Interakcje związane będą przede wszystkim z klawiaturą i myszką.

    Pole:
        Wejście myszy:
            Niewciśnięta?
                Aktywacja pola
            Wciśnięta?
                Kontynuacja zaznaczenia - zaznacz pola sekwencyjnie
            Wciśnięta + shift?
                Kontynuacja zaznaczenia blokowego - zaznacz pola blokowo
    
        Wciśnięcie myszy LPM:
            Rozpoczęcie zaznaczenia

        Koniec wciśnięcia LPM:
            Zakończenie zaznaczenia

        Wciśnięcie PPM:
            Menu popup

        Scroll:
            Scrollowanie :p

        Podwójne wciśnięcie myszy:
            Zaznaczenie całego markupu (późniejszy etap implementacji)

    Klawiatura:
        Strzałka:
            Redukcja zaznaczenia do pierwszego pola
            Odpowiednie przesunięcie (z ew. scrollowaniem jeśli wymagane)

            W przypadku gdy jesteśmy w trakcie edycji: zaniechanie tej edycji
            (wiem, że można np. przesuwać kursor wewnątrz edytowanego pola, ale kij już w to)
        Page down/Page up:
            Scroll o stronę - zależy od tego ile aktualnie wierszy mieści się na stronie
        ESC:
            Zaniechanie zaznaczenia (redukcja do pierwszego pola)
            Zaniechanie trwającej edycji
        Shift-strzałka:
            Przesunięcie z zaznaczaniem sekwencyjnym
        Shift-alt-strzałka:
            Przesunięcie z zaznaczaniem blokowym
        Klawisze alfanumeryczne:
            Edycja pola/pól (potem rozpiszemy dokładny algorytm, będzie względnie prosty)
            Na pewno pierwszy wpisany hex będzie trzymany tylko w specjalnej zmiennej
            Po wpisaniu drugiego: zostanie już wykonany konkretny zapis

    Na razie na tym etapie darujmy sobie wciskanie sekcji, row itd.
    Warto jednak tak projektować edytor, by był na to gotowy
    (np. na inny row-length)
    W celu uelastycznienia offsetu musimy chyba zmienić FileContext.
    W ogóle ten cały datastore to chyba powinien być element modułu edytora :P
    A ten cały FileContext na razie to już kompletna prowizorka - do przebudowy!

Stan edytora musi wyróżniać następujące elementy:
    * Pending/Ready
    * Focused/Not focused
    * Selection
    * Current first row
    * Rows by page
    * Pending edit (wartość, która po zakończeniu edycji zostanie wpisana)
    * Scroll state
    * Interactivity state

    Interaktywność również ma swoich kilka stanów:
        -> No interactive (brak reakcji na zdarzenia, wszystko wyszarzone)
        -> Only popup (tryb interakcji w wypadku, gdy otwarty jest popup menu)
           Wtedy powinniśmy wyłącznie móc wciskać przyciski menu i ew. zareagować na wciśnięcie edytora,
           by popup zamknąć
        -> Full interactivity

Ładowanie pliku (na poziomie menedżera kart):
    Można w sumie również to oddać w ręce edytora.
    Zaczęłoby się od stanu pending i edytor sam by świetnie skontrolował moment, w którym
    dane zostałyby już załadowane.

Proponowany szkielet klas:
    * Editor
    * Component
        |
        |_ ScrollBox (btw, muszę wykminić jakiś vertical pseudoscroll)
        |
        |_ Row
        |   |
        |   |_ ValueRow
        |   |
        |   |_ SectionRow
        |
        |_ Cell
