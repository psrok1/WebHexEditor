//<reference path="../typings/index.d.ts" />
//import React, { Component, PropTypes } from 'react'
//import shallowCompare from 'react-addons-shallow-compare'

declare namespace ReactVirtualized {
    import React = __React;

    export class AutoSizer
        extends React.Component<{
            children?: (height: number, width: number) => any,
            disableHeight?: boolean,
            disableWidth?: boolean,
            onResize?: (height: number, width: number) => any
        }, {}>
    { }

    type VirtualScrollSelector<R> = (params: { index: number }) => R;

    interface VirtualScrollProps {
        /**
         * Removes fixed height from the scrollingContainer so that the total height
         * of rows can stretch the window. Intended for use with WindowScroller
         */
        autoHeight?: boolean;

        /** Optional CSS class name */
        className?: string;

        /**
         * Used to estimate the total height of a VirtualScroll before all of its rows have actually been measured.
         * The estimated total height is adjusted as rows are rendered.
         */
        estimatedRowSize?: number;

        /** Height constraint for list (determines how many actual rows are rendered) */
        height: number;

        /** Optional renderer to be used in place of rows when rowCount is 0 */
        noRowsRenderer: () => JSX.Element;

        /**
         * Callback invoked with information about the slice of rows that were just rendered.
         * ({ startIndex, stopIndex }): void
         */
        onRowsRendered?: (params: { startIndex: number, stopIndex: number }) => void;

        /**
         * Number of rows to render above/below the visible bounds of the list.
         * These rows can help for smoother scrolling on touch devices.
         */
        overscanRowCount: number;

        /**
         * Callback invoked whenever the scroll offset changes within the inner scrollable region.
         * This callback can be used to sync scrolling between lists, tables, or grids.
         * ({ clientHeight, scrollHeight, scrollTop }): void
         */
        onScroll?: (params: { clientHeight: number, scrollHeight: number, scrollTop: number }) => void;

        /**
         * Either a fixed row height (number) or a function that returns the height of a row given its index.
         * ({ index: number }): number
         */
        rowHeight: VirtualScrollSelector<number> | number;

        /** Responsbile for rendering a row given an index; ({ index: number }): node */
        rowRenderer: VirtualScrollSelector<JSX.Element>;

        /** Optional custom CSS class for individual rows */
        rowClassName?: string;

        /** Number of rows in list. */
        rowCount: number,

        /** Optional custom styles for individual cells */
        rowStyle?: any;

        /** See Grid#scrollToAlignment */
        scrollToAlignment?: 'auto' | 'end' | 'start' | 'center';

        /** Row index to ensure visible (by forcefully scrolling if necessary) */
        scrollToIndex?: number;

        /** Vertical offset. */
        scrollTop?: number;

        /** Optional inline style */
        style?: any;

        /** Tab index for focus */
        tabIndex?: number;

        /** Width of list */
        width: number;
    }

    export class VirtualScroll extends React.Component<VirtualScrollProps, {}> { }
}

export = ReactVirtualized;